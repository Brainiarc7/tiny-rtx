#version 460
#extension GL_NV_ray_tracing : require
#extension GL_GOOGLE_include_directive : enable

#include "utils.glsl"

struct RayPayload {
  vec4 colorAndDistance;
  vec4 scatterDirection;
  uint seed;
};

layout(location = 0) rayPayloadNV RayPayload Ray;

layout(binding = 0, set = 0) uniform accelerationStructureNV topLevelAS;

layout(binding = 1, set = 0, rgba8) uniform image2D outputImage;
layout(binding = 2, rgba32f) uniform image2D accumulationImage;

layout(binding = 3, set = 0) uniform CameraData {
  mat4 mViewInverse;
  mat4 mProjectionInverse;
  float aperture;
  float focusDistance;
  uint numberOfSamples;
  uint totalSampleCount;
  uint numberOfBounces;
} uCamera;

void main() {
  const uint sampleCount = uCamera.numberOfSamples;
  const uint bounceCount = uCamera.numberOfBounces;
  const uint totalSampleCount = uCamera.totalSampleCount;

  ivec2 ipos = ivec2(gl_LaunchIDNV.xy);

  uint seed = 1;
  Ray.seed = tea(tea(ipos.x, ipos.y), uCamera.totalSampleCount);

  const float tMin = 0.01;
  const float tMax = 8192.0;

  const uint cullMask = 0xFF; // -> GeometryLayout.mask

  // in case camera UBO isn't staged
  const float aperture = uCamera.aperture;
  const float focusDistance = uCamera.focusDistance;
  const mat4 mViewInverse = uCamera.mViewInverse;
  const mat4 mProjectionInverse = uCamera.mProjectionInverse;

  vec3 pixelColor = vec3(0);
  for (uint ss = 0; ss < sampleCount; ++ss) {
    const vec2 offset = aperture / 2.0 * randInUnitDisk(Ray.seed);
    const vec2 pixel = vec2(ipos.x + randf01(seed), ipos.y + randf01(seed));
    const vec2 uv = (pixel / gl_LaunchSizeNV.xy) * 2.0 - 1.0;

    vec4 origin = mViewInverse * vec4(offset, 0, 1);
    vec4 target = mProjectionInverse * (vec4(uv.x, uv.y, 1, 1));
    vec4 direction = mViewInverse * vec4(normalize(target.xyz * focusDistance - vec3(offset, 0)), 0);

    vec3 rayColor = vec3(1);
    for (uint bb = 0; bb < bounceCount; ++bb) {
      traceNV(topLevelAS, gl_RayFlagsOpaqueNV, cullMask, 0, 0, 0, origin.xyz, tMin, direction.xyz, tMax, 0);

      rayColor *= Ray.colorAndDistance.rgb;

      const float t = Ray.colorAndDistance.w;
      if (t < 0.0 || Ray.scatterDirection.w <= 0.0) break;

      origin = origin + t * direction;
      direction = vec4(Ray.scatterDirection.xyz, 0);
    };

    pixelColor += rayColor;
  };

  const bool accumulate = sampleCount != totalSampleCount;
  const vec3 accumulatedColor = imageLoad(accumulationImage, ivec2(ipos.xy)).rgb * float(accumulate) + pixelColor;

  pixelColor = sqrt(accumulatedColor / totalSampleCount);

  imageStore(accumulationImage, ivec2(ipos.xy), vec4(accumulatedColor, 0));
  imageStore(outputImage, ivec2(ipos.xy), vec4(pixelColor, 0));
}
